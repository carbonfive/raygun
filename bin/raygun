#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'fileutils'
require 'securerandom'
require 'colorize'

module Raygun
  class Runner
    attr_accessor :target_dir, :app_dir, :app_name, :dash_name, :snake_name, :camel_name, :title_name, :prototype

    def initialize(target_dir, prototype)
      @target_dir = target_dir
      @app_dir    = File.expand_path(target_dir.strip.to_s)
      @app_name   = File.basename(app_dir).gsub(/\s+/, '-')
      @dash_name  = app_name.gsub('_', '-')
      @snake_name = app_name.gsub('-', '_')
      @camel_name = camelize(snake_name)
      @title_name = titleize(snake_name)
      @prototype  = prototype
    end

    def check_target
      unless Dir["#{@app_dir}/*"].empty?
        puts "Misfire! The target directory isn't empty... aim elsewhere."
        exit 1
      end
    end

    def copy_prototype
      FileUtils.mkdir_p(app_dir)

      Dir.glob(File.expand_path("../../#{@prototype}/*", __FILE__), File::FNM_DOTMATCH) do |f|
        next if %w{. ..}.include?(File.basename(f))
        FileUtils.cp_r(f, app_dir)
      end
    end

    def rename_new_app
      Dir.chdir(app_dir) do
        {
          'AppPrototype'  => camel_name,
          'app-prototype' => dash_name,
          'app_prototype' => snake_name,
          'App Prototype' => title_name
        }.each do |proto_name, new_name|
          shell "find . -type f -print | xargs #{sed_i} 's/#{proto_name}/#{new_name}/g'"
        end
      end
    end

    def configure_new_app
      update_ruby_version
      initialize_git
    end

    def update_ruby_version
      prototype_ruby_patch_level  = File.read(File.expand_path("../../#{prototype}/.ruby-version", __FILE__)).strip
      prototype_ruby_version      = prototype_ruby_patch_level.match(/(\d\.\d\.\d).*/)[1]
      current_ruby_version        = RUBY_VERSION
      current_ruby_patch_level    = "#{RUBY_VERSION}-p#{RUBY_PATCHLEVEL}"

      Dir.chdir(app_dir) do
        shell "#{sed_i} 's/#{prototype_ruby_patch_level}/#{current_ruby_patch_level}/g' .ruby-version README.md"
        shell "#{sed_i} 's/#{prototype_ruby_version}/#{current_ruby_version}/g' Gemfile"
      end
    end

    def initialize_git
      Dir.chdir(app_dir) do
        shell 'git init'
        shell 'git add -A .'
        shell 'git commit -m "raygun-zapped skeleton"'
      end
    end

    def print_plan

      project_template = (prototype == 'rails_32') ? '3.2' : '4'

      puts '     ____ '.colorize(:light_yellow)
      puts '    / __ \____ ___  ______ ___  ______ '.colorize(:light_yellow)
      puts '   / /_/ / __ `/ / / / __ `/ / / / __ \ '.colorize(:light_yellow)
      puts '  / _, _/ /_/ / /_/ / /_/ / /_/ / / / / '.colorize(:light_yellow)
      puts ' /_/ |_|\__,_/\__, /\__, /\__,_/_/ /_/ '.colorize(:light_yellow)
      puts '             /____//____/ '.colorize(:light_yellow)
      puts
      puts "Creating new app in directory".colorize(:yellow) + " #{target_dir}".colorize(:yellow) + "...".colorize(:yellow)
      puts
      puts "-".colorize(:blue) + " Application Name:".colorize(:light_blue) + " #{title_name}".colorize(:light_reen)
      puts "-".colorize(:blue) + " Project Template:".colorize(:light_blue) + " Rails #{project_template}".colorize(:light_reen)
      puts "-".colorize(:blue) + " Ruby Version:    ".colorize(:light_blue) + " #{RUBY_VERSION}-p#{RUBY_PATCHLEVEL}".colorize(:light_reen)
      puts
    end

    def print_next_steps
      puts "Done! Next steps...".colorize(:yellow)
      puts ""
      puts "# Install updated dependencies".colorize(:light_green)
      puts "$".colorize(:blue) + " cd #{target_dir}".colorize(:light_blue)
      puts "$".colorize(:blue) + " gem install bundler".colorize(:light_blue)
      puts "$".colorize(:blue) + " bundle update".colorize(:light_blue)
      puts ""
      puts "# Prepare the database: schema and reference / sample data".colorize(:light_green)
      puts "$".colorize(:blue) + " rake db:setup db:sample_data".colorize(:light_blue)
      puts ""
      puts "# Run the specs (they should all pass)".colorize(:light_green)
      puts "$".colorize(:blue) + " rake".colorize(:light_blue)
      puts ""
      puts "# Run the app and check things out".colorize(:light_green)
      puts "$".colorize(:blue) + " foreman start".colorize(:light_blue)
      puts "$".colorize(:blue) + " open http://0.0.0.0:3000".colorize(:light_blue)
      puts ""
      puts "Enjoy your Carbon Five flavored Rails application!".colorize(:yellow)
    end

    protected

    def camelize(string)
      result = string.sub(/^[a-z\d]*/) { $&.capitalize }
      result.gsub(/(?:_|(\/))([a-z\d]*)/) { "#{$1}#{$2.capitalize}" }
    end

    def titleize(underscored_string)
      result = underscored_string.gsub(/_/, ' ')
      result.gsub(/\b('?[a-z])/) { $1.capitalize }
    end

    # Distinguish BSD vs GNU sed with the --version flag (only present in GNU sed).
    def sed_i
      @sed_format ||= begin
        %x{sed --version &> /dev/null}
        $?.success? ? "sed -i" : "sed -i ''"
      end
    end

    # Run a shell command and raise an exception if it fails.
    def shell(command)
      %x{#{command}}
      raise "#{command} failed with status #{$?.exitstatus}." unless $?.success?
    end

    def self.parse(args)
      raygun = nil
      options = OpenStruct.new
      options.target_dir = nil
      options.prototype  = 'rails_32'

      parser = OptionParser.new do |opts|
        opts.banner = "Usage: raygun [options] NEW_APP_DIRECTORY"

        opts.on('-h', '--help', "Show raygun usage") do |variable|
          usage_and_exit(opts)
        end

        opts.on('-r', '--rails (32|40)', "Rails version, 32 for 3.2.x or 40 for 4.0.x") do |ext|
          ext = '40' if ext == '4'
          options.prototype = "rails_#{ext}"
        end
      end

      begin
        parser.parse!
        options.target_dir = ARGV.first

        raise OptionParser::InvalidOption if options.target_dir.nil?

        raygun = Raygun::Runner.new(options.target_dir, options.prototype)

      rescue OptionParser::InvalidOption
        usage_and_exit(parser)
      end

      raygun
    end

    def self.usage_and_exit(parser)
      puts parser
      exit 1
    end
  end
end

raygun = Raygun::Runner.parse(ARGV)
raygun.check_target
raygun.print_plan
raygun.copy_prototype
raygun.rename_new_app
raygun.configure_new_app
raygun.print_next_steps
